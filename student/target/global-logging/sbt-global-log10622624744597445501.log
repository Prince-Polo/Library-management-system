[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\admin\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\admin\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 22.0.1)
[debug] Load.defaultLoad until apply took 65.074ms
[debug]           Load.loadUnit: plugins took 62.968ms
[debug]           Load.loadUnit: defsScala took 0.1407ms
[debug] [Loading] Scanning directory E:\Documents\GitHub\Library-management-system\patient\project
[debug]             Load.loadUnit: mkEval took 4.1638ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\Documents\GitHub\Library-management-system\patient\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 7.8998 ms
[info] loading settings for project patient-build from idea.sbt ...
[debug]               Load.resolveProject(patient-build) took 37.126ms
[debug]             Load.loadTransitive: finalizeProject(Project(id patient-build, base: E:\Documents\GitHub\Library-management-system\patient\project, plugins: List(<none>))) took 57.6568ms
[debug] [Loading] Done in E:\Documents\GitHub\Library-management-system\patient\project, returning: (patient-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2185.7969ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.3493ms
[debug]         Load.loadUnit(file:/E:/Documents/GitHub/Library-management-system/patient/project/, ...) took 2258.3526ms
[debug]       Load.apply: load took 2394.1199ms
[debug]       Load.apply: resolveProjects took 2.8579ms
[debug]       Load.apply: finalTransforms took 43.3197ms
[debug]       Load.apply: config.delegates took 9.495ms
[debug]       Load.apply: Def.make(settings)... took 444.6473ms
[debug]       Load.apply: structureIndex took 72.5485ms
[debug]       Load.apply: mkStreams took 3.4849ms
[info] loading project definition from E:\Documents\GitHub\Library-management-system\patient\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4730.8613ms
[debug]     Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory E:\Documents\GitHub\Library-management-system\patient
[debug]       Load.loadUnit: mkEval took 0.2099ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.621 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 25.1138ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: E:\Documents\GitHub\Library-management-system\patient, plugins: List(<none>))) took 27.5656ms
[debug] [Loading] Done in E:\Documents\GitHub\Library-management-system\patient, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1273.3834ms
[debug]     Load.loadUnit: cleanEvalClasses took 20.2164ms
[debug]   Load.loadUnit(file:/E:/Documents/GitHub/Library-management-system/patient/, ...) took 6025.5406ms
[debug] Load.apply: load took 6036.3966ms
[debug] Load.apply: resolveProjects took 0.0851ms
[debug] Load.apply: finalTransforms took 13.3659ms
[debug] Load.apply: config.delegates took 0.5864ms
[debug] Load.apply: Def.make(settings)... took 54.0209ms
[debug] Load.apply: structureIndex took 14.2149ms
[debug] Load.apply: mkStreams took 0.002ms
[info] set current project to Patient (in build file:/E:/Documents/GitHub/Library-management-system/patient/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57768 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57768, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by no settings or tasks.
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by no settings or tasks.
[info] Reapplying settings...
[info] set current project to Patient (in build file:/E:/Documents/GitHub/Library-management-system/patient/)
[debug] > Exec(idea-shell, None, None)
